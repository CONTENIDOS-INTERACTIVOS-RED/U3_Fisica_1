{"remainingRequest":"/home/runner/work/U3_Fisica_1/U3_Fisica_1/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Fisica_1/U3_Fisica_1/src/views/curso/Tema3.vue?vue&type=template&id=0c82ec3e&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Fisica_1/U3_Fisica_1/src/views/curso/Tema3.vue","mtime":1747279669111},{"path":"/home/runner/work/U3_Fisica_1/U3_Fisica_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fisica_1/U3_Fisica_1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fisica_1/U3_Fisica_1/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fisica_1/U3_Fisica_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fisica_1/U3_Fisica_1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}